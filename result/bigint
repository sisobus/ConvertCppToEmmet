\		'ps:bigint': "class Natural {\n"
\			."\tstatic const int BASE = 100000000;\n"
\			."\tstatic const int BASEDIGS = 8;\n"
\			."\tint ndigs;\n"
\			."\tint *digs;\n"
\			."\tvoid init(int n,const int *d) {\n"
\			."\t\twhile(n>0 && d[n-1]==0) --n;\n"
\			."\t\tndigs=n;\n"
\			."\t\tdigs=new int[n];\n"
\			."\t\tfor(int i=0;i<n;++i) digs[i]=d[i];\n"
\			."\t}\n"
\			."\tNatural(int n,const int *d) { init(n,d); }\n"
\			."\tNatural operator<<(int sh) const {\n"
\			."\t\tint n=sh+ndigs;\n"
\			."\t\tint d[n];\n"
\			."\t\tREP(i,sh) d[i]=0;\n"
\			."\t\tREP(i,ndigs) d[i+sh]=digs[i];\n"
\			."\t\treturn Natural(n,d);\n"
\			."\t}\n"
\			."\tpublic:\n"
\			."\tNatural(int x=0) {\n"
\			."\t\tint d[2];\n"
\			."\t\td[0]=x%BASE;\n"
\			."\t\td[1]=x/BASE;\n"
\			."\t\tinit(2,d);\n"
\			."\t}\n"
\			."\tNatural(const Natural& a) {\n"
\			."\t\tinit(a.ndigs,a.digs);\n"
\			."\t}\n"
\			."\tNatural(const char *s) {\n"
\			."\t\tint n=strlen(s);\n"
\			."\t\tint nd=n/BASEDIGS+1;\n"
\			."\t\tint d[nd];\n"
\			."\t\tREP(i,nd) {\n"
\			."\t\t\td[i]=0;\n"
\			."\t\t\tFORD(j,BASEDIGS-1,0) {\n"
\			."\t\t\t\tint poz=i*BASEDIGS+j;\n"
\			."\t\t\t\tif(poz<n) d[i]=10*d[i]+s[n-1-poz]-'0';\n"
\			."\t\t\t}\n"
\			."\t\t}\n"
\			."\t\tinit(nd,d);\n"
\			."\t}\n"
\			."\t~Natural() { delete[] digs; }\n"
\			."\tNatural &operator=(const Natural& a) {\n"
\			."\t\tdelete[] digs;\n"
\			."\t\tinit(a.ndigs,a.digs);\n"
\			."\t\treturn *this;\n"
\			."\t}\n"
\			."\tNatural operator+(const Natural& a) const {\n"
\			."\t\tint n=max(ndigs,a.ndigs)+1;\n"
\			."\t\tint d[n];\n"
\			."\t\tREP(i,n) d[i]=0;\n"
\			."\t\tREP(i,n) {\n"
\			."\t\t\tif(i<ndigs) d[i]+=digs[i];\n"
\			."\t\t\tif(i<a.ndigs) d[i]+=a.digs[i];\n"
\			."\t\t\tif(d[i]>=BASE) { d[i]-=BASE; ++d[i+1]; }\n"
\			."\t\t}\n"
\			."\t\treturn Natural(n,d);\n"
\			."\t}\n"
\			."\tNatural &operator+=(const Natural& a) {\n"
\			."\t\treturn *this = *this + a;\n"
\			."\t}\n"
\			."\tNatural operator-(const Natural& a) const {\n"
\			."\t\tint d[ndigs];\n"
\			."\t\tREP(i,ndigs) d[i]=digs[i];\n"
\			."\t\tREP(i,ndigs) {\n"
\			."\t\t\tif (i < a.ndigs) d[i]-=a.digs[i];\n"
\			."\t\t\tif (d[i] < 0) {\n"
\			."\t\t\t\td[i]+=BASE;\n"
\			."\t\t\t\t--d[i+1];\n"
\			."\t\t\t}\n"
\			."\t\t}\n"
\			."\t\treturn Natural(ndigs,d);\n"
\			."\t}\n"
\			."\tNatural &operator-=(const Natural& a) {\n"
\			."\t\treturn *this = *this - a;\n"
\			."\t}\n"
\			."\tNatural operator*(const Natural& a) const {\n"
\			."\t\tint n=ndigs+a.ndigs;\n"
\			."\t\tint d[n];\n"
\			."\t\tREP(i,n) d[i]=0;\n"
\			."\t\tREP(i,ndigs) {\n"
\			."\t\t\tint p=0;\n"
\			."\t\t\tREP(j,a.ndigs) {\n"
\			."\t\t\t\tlong long v=(long long)(digs[i])*a.digs[j];\n"
\			."\t\t\t\tint v1=v/BASE,v0=v%BASE;\n"
\			."\t\t\t\td[i+j]+=v0+p;\n"
\			."\t\t\t\tp=v1+d[i+j]/BASE;\n"
\			."\t\t\t\td[i+j]%=BASE;\n"
\			."\t\t\t}\n"
\			."\t\t\tfor(int j=i+a.ndigs;p>0;++j) {\n"
\			."\t\t\t\td[j]+=p;\n"
\			."\t\t\t\tp=d[j]/BASE;\n"
\			."\t\t\t\td[j]%=BASE;\n"
\			."\t\t\t}\n"
\			."\t\t}\n"
\			."\t\treturn Natural(n,d);\n"
\			."\t}\n"
\			."\tNatural &operator*=(const Natural&a) {\n"
\			."\t\treturn *this = *this * a;\n"
\			."\t}\n"
\			."\tNatural operator/(const Natural& a) const {\n"
\			."\t\tint n=max(ndigs-a.ndigs+1,0);\n"
\			."\t\tint d[n];\n"
\			."\t\tNatural prod;\n"
\			."\t\tFORD(i,n-1,0) {\n"
\			."\t\t\tint l=0, r=BASE-1;\n"
\			."\t\t\twhile(l<r) {\n"
\			."\t\t\t\tint m=(l+r+1)/2;\n"
\			."\t\t\t\tif (*this<prod+(a*m<<i))\n"
\			."\t\t\t\t\tr=m-1;\n"
\			."\t\t\t\telse\n"
\			."\t\t\t\t\tl=m;\n"
\			."\t\t\t}\n"
\			."\t\t\tprod+=a*l<<i;\n"
\			."\t\t\td[i]=l;\n"
\			."\t\t}\n"
\			."\t\treturn Natural(n,d);\n"
\			."\t}\n"
\			."\n"
\			."\tNatural &operator/=(const Natural& a) {\n"
\			."\t\treturn *this = *this / a;\n"
\			."\t}\n"
\			."\tNatural operator%(const Natural&a) const {\n"
\			."\t\treturn *this - *this/a*a;\n"
\			."\t}\n"
\			."\tNatural &operator%=(const Natural&a) {\n"
\			."\t\treturn *this = *this % a;\n"
\			."\t}\n"
\			."\tNatural sqrt() const {\n"
\			."\t\tint n=(ndigs+1)/2;\n"
\			."\t\tint d[n];\n"
\			."\t\tREP(i,n) d[i]=0;\n"
\			."\t\tNatural sq;\n"
\			."\t\tFORD(i,n-1,0) {\n"
\			."\t\t\tNatural a(n,d);\n"
\			."\t\t\tint l=0, r=BASE-1;\n"
\			."\t\t\twhile(l<r) {\n"
\			."\t\t\t\tint m=(l+r+1)/2;\n"
\			."\t\t\t\tif (*this<sq+(a*2*m<<i)+(Natural(m)*m<<2*i))\n"
\			."\t\t\t\t\tr=m-1;\n"
\			."\t\t\t\telse\n"
\			."\t\t\t\t\tl=m;\n"
\			."\t\t\t}\n"
\			."\t\t\tsq+=(a*2*l<<i)+(Natural(l)*l<<2*i);\n"
\			."\t\t\td[i]=l;\n"
\			."\t\t}\n"
\			."\t\treturn Natural(n,d);\n"
\			."\t}\n"
\			."\tNatural operator*(int x) const {\n"
\			."\t\tint n=ndigs+1;\n"
\			."\t\tint d[n];\n"
\			."\t\tlong long a=0;\n"
\			."\t\tREP(i,ndigs) {\n"
\			."\t\t\ta+=digs[i]*(long long)x;\n"
\			."\t\t\td[i]=a%BASE;\n"
\			."\t\t\ta/=BASE;\n"
\			."\t\t}\n"
\			."\t\td[ndigs]=a;\n"
\			."\t\treturn Natural(n,d);\n"
\			."\t}\n"
\			."\tNatural &operator*=(int x) {\n"
\			."\t\treturn *this = *this * x;\n"
\			."\t}\n"
\			."\tNatural operator/(int x) const {\n"
\			."\t\tint d[ndigs];\n"
\			."\t\tlong long a=0;\n"
\			."\t\tFORD(i,ndigs-1,0) {\n"
\			."\t\t\ta=BASE*a+digs[i];\n"
\			."\t\t\td[i]=a/x;\n"
\			."\t\t\ta%=x;\n"
\			."\t\t}\n"
\			."\t\treturn Natural(ndigs,d);\n"
\			."\t}\n"
\			."\tNatural &operator/=(int x) {\n"
\			."\t\treturn *this = *this / x;\n"
\			."\t}\n"
\			."\tint operator%(int x) const {\n"
\			."\t\tlong long a=0;\n"
\			."\t\tFORD(i,ndigs-1,0) {\n"
\			."\t\t\ta=BASE*a+digs[i];\n"
\			."\t\t\ta%=x;\n"
\			."\t\t}\n"
\			."\t\treturn a;\n"
\			."\t}\n"
\			."\tbool operator<(const Natural& a) const {\n"
\			."\t\tif(ndigs<a.ndigs) return true;\n"
\			."\t\tif(ndigs>a.ndigs) return false;\n"
\			."\t\tFORD(i,ndigs-1,0) {\n"
\			."\t\t\tif(digs[i]<a.digs[i]) return true;\n"
\			."\t\t\tif(digs[i]>a.digs[i]) return false;\n"
\			."\t\t}\n"
\			."\t\treturn false;\n"
\			."\t}\n"
\			."\tbool operator==(const Natural&a) const {\n"
\			."\t\tif(ndigs!=a.ndigs) return false;\n"
\			."\t\tREP(i,ndigs) {\n"
\			."\t\t\tif(digs[i]!=a.digs[i]) return false;\n"
\			."\t\t}\n"
\			."\t\treturn true;\n"
\			."\t}\n"
\			."\tbool operator>(const Natural&a) const { return a<*this; }\n"
\			."\tbool operator<=(const Natural&a) const { return !(a<*this); }\n"
\			."\tbool operator>=(const Natural&a) const { return !(*this<a); }\n"
\			."\tbool operator!=(const Natural&a) const { return !(*this==a); }\n"
\			."\tvoid write() const {\n"
\			."\t\tif(ndigs==0) printf("0");\n"
\			."\t\telse {\n"
\			."\t\t\tprintf("%d",digs[ndigs-1]);\n"
\			."\t\t\tFORD(i,ndigs-2,0) printf("%0*d",BASEDIGS,digs[i]);\n"
\			."\t\t}\n"
\			."\t}\n"
\			."\tvoid write(char *buf) const {\n"
\			."\t\tif(ndigs==0) sprintf(buf,"0");\n"
\			."\t\telse {\n"
\			."\t\t\tint pos=0;\n"
\			."\t\t\tpos+=sprintf(buf,"%d",digs[ndigs-1]);\n"
\			."\t\t\tFORD(i,ndigs-2,0) pos+=sprintf(buf+pos,"%0*d",BASEDIGS,digs[i]);\n"
\			."\t\t}\n"
\			."\t}\n"
\			."};\n",
